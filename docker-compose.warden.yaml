name: ${APP_NAME}

services:

  nginx:
    image: nginx:1.27.0
    restart: unless-stopped
    ports:
      - "127.0.0.1:9010:80"
      - "127.0.0.1:9017:4317"
    volumes:
      - ./services/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./services/nginx/upstream.conf:/etc/nginx/conf.d/upstream.conf:ro
      - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - project-network
    depends_on:
      - otel-collector
      - prometheus
      - tempo
      - grafana
      - loki
      - alertmanager
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1:80/"]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 10s

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    volumes:
      - ./services/otel-collector/config.yaml:/etc/otel/config.yaml
    command: ["--config", "/etc/otel/config.yaml"]
    restart: unless-stopped
    networks:
      - project-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9000/"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    user: root
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9000/-/healthy"]
      interval: 5s      
      timeout: 10s      
      retries: 3        
      start_period: 20s
    volumes:
      - ./services/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./services/prometheus/rules:/etc/prometheus/rules
      - ./services/prometheus/scrape_configs:/etc/prometheus/scrape_configs
      - /var/lib/warden-data/prometheus:/var/lib/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/var/lib/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.listen-address=:9000'
      - '--log.format=json'
    networks:
      - project-network

  grafana:
    image: grafana/grafana-oss:latest
    restart: unless-stopped
    volumes:
      - grafana:/var/lib/grafana
      - ./services/grafana/provisioning:/etc/grafana/provisioning
      - ./services/grafana/dashboards:/var/lib/grafana/dashboards
    env_file:
      - .env.dev
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - project-network

  alertmanager:
    image: prom/alertmanager:latest
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--web.listen-address=:9000'
    env_file:
      - .env.dev
    volumes:
      - ./services/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    networks:
      - project-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9000/-/healthy"]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 20s

  loki:
    image: grafana/loki:3.1.1
    restart: unless-stopped
    networks:
      - project-network
    expose:
      - "9000"
    volumes:
      - ./services/loki/config.yml:/etc/loki/config.yml:ro
      - /var/lib/warden-data/loki:/var/lib/loki
    command: >
      -config.file=/etc/loki/config.yml
      -server.http-listen-port=9000
      -config.expand-env=true
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9000/ready"]
      interval: 15s
      timeout: 5s
      retries: 5

  tempo:
    image: grafana/tempo:latest
    command: > 
      -config.file=/etc/tempo.yaml
      -reporting.enabled=false
    restart: unless-stopped
    volumes:
      - ./services/tempo/config.yaml:/etc/tempo.yaml
      - /var/lib/warden-data/tempo:/tmp/tempo/traces 
    networks:
      - project-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9000/ready"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 20s


volumes:
  grafana:
    name: ${APP_NAME}-grafana

networks:
  project-network:
    name: ${APP_NAME}-net
    driver: bridge